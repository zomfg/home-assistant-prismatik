name: Latest HA

on:
  # push:
  #   branches: [ 'feature/ci' ]
  # pull_request:
  #   branches: [ master ]
  schedule:
    - cron: '0 0 * * *'

jobs:
  test_vs_hass:
    runs-on: ubuntu-20.04
    name: Test vs last Home Assistant
    env:
      HASS_IMAGE: homeassistant/home-assistant
      TEST_RESPONSE: ${{ github.workspace }}/response.log
    steps:
      - name: Check for new HA versions
        env:
          INTERVAL: 24
          DHUB_URL: 'https://hub.docker.com/v2/repositories/${{ env.HASS_IMAGE }}/tags/?page_size=5&page=1&name=0.&ordering=last_updated'
          DHUB_RES: ${{ github.workspace }}/dhub_res.json
          HA_TAG_FILE: ${{ github.workspace }}/tag
        run: |
          set -xe
          curl "$DHUB_URL" > "$DHUB_RES"

          # get last stable tag and flag it as new/old
          cat << EOF | python -- > "$HA_TAG_FILE"
          import datetime as dt
          import json
          import re

          with open('$DHUB_RES') as f:
            data = json.load(f)

          re_version = re.compile(r"^0\.[0-9]+(\.[0-9]+)?$")
          prev_date = dt.datetime.today() - dt.timedelta(hours = $INTERVAL)

          for tag in data['results']:
            if re_version.match(tag['name']) is not None:
              is_new = dt.datetime.strptime(tag['last_updated'], '%Y-%m-%dT%H:%M:%S.%fZ') > prev_date
              print(f"{tag['name']} {int(is_new)}")
              break

          EOF

          echo "HASS_TAG=$(cat $HA_TAG_FILE | cut -d' ' -f 1)" >> $GITHUB_ENV
          echo "HASS_NEW=$(cat $HA_TAG_FILE | cut -d' ' -f 2)" >> $GITHUB_ENV

      - name: Checkout Source
        if: ${{ env.HASS_NEW == '1' }}
        uses: actions/checkout@v2
        with:
          path: 'config/custom_components/prismatik'

      - name: Pull HA
        if: ${{ env.HASS_NEW == '1' }}
        run: |
          set -xe
          docker pull "$HASS_IMAGE:$HASS_TAG"

      - name: Generate HA config yaml
        if: ${{ env.HASS_NEW == '1' }}
        working-directory: config
        run: |
          set -xe
          cat << EOF > configuration.yaml
          default_config:

          light:
            - platform: prismatik
              host: 127.0.0.1

          logger:
            default: warning
            logs:
              custom_components.prismatik: debug
          EOF

      - name: Launch Prismatik dummy server
        if: ${{ env.HASS_NEW == '1' }}
        working-directory: config/custom_components/prismatik
        run: |
          set -xe
          ./test_server.py > "$TEST_RESPONSE" &

      - name: Run HA for 15 seconds
        if: ${{ env.HASS_NEW == '1' }}
        env:
          HASS_CONTAINER: tmphass
        run: |
          set -xe

          docker run \
            -v "$(pwd)/config:/config" \
            --rm \
            --network=host \
            --name "$HASS_CONTAINER" "$HASS_IMAGE:$HASS_TAG" &

          sleep 15

          docker stop "$HASS_CONTAINER"

      - name: Check HA Log / Server responses
        if: ${{ env.HASS_NEW == '1' }}
        working-directory: config
        run: |
          set -xe

          [ -s "$TEST_RESPONSE" ]

          for r in `cat "$TEST_RESPONSE"`
          do
              grep -Fo "$r" home-assistant.log || exit 1
          done
